# -*- coding: utf-8 -*-
"""Project4 : House Price Pridiction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RtRH8VF6bOnwMoyLDLBaeHDArNmkppNQ
"""



"""Importing the dependencies."""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics



"""Importing the Boston House Price Data"""

house_price_dataset = sklearn.datasets.fetch_california_housing()

print(house_price_dataset)

# Loading the dataset to a pandas data frame
house_price_dataframe=pd.DataFrame(house_price_dataset.data,columns=house_price_dataset.feature_names)

# Print the first 5 rows of our dataframe
house_price_dataframe.head()

# Add the target column to the target frame
house_price_dataframe['price']=house_price_dataset.target

house_price_dataframe.head()

# checking the number of rows and columns in the dataframe
house_price_dataframe.shape

#checking the missing values
house_price_dataframe.isnull().sum()

# statistical measures of the dataset
house_price_dataframe.describe()

"""Understanding the correlation between various features in the dataset

1.Positive Correlation
2.Negative Correlation
"""

correlation = house_price_dataframe.corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt= '.1f', annot=True, annot_kws={'size':8},cmap='Blues')

"""Splitting the Data and Target"""

X=house_price_dataframe.drop(['price'],axis=1)
Y=house_price_dataframe['price']

print(X)
print(Y)

"""Splitting the data into Training data and Test data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

XGBoost Regressor
"""

# Loading the model
model = XGBRegressor()

#training the data with X-train
model.fit(X_train,Y_train)

"""Evaluation

Prediction on Training data
"""

# Accuracy for the prediction on the training data
training_data_prediction=model.predict(X_train)

print(training_data_prediction)

#R squared error
score_1 = metrics.r2_score(Y_train,training_data_prediction)

#Mean absolute error
score_2=metrics.mean_absolute_error(Y_train,training_data_prediction)

print("R_squared_error :",score_1)
print("Mean_absolute_error :",score_2)

"""Visualizing the actual price and predicted price"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Price")
plt.show()

"""Prediction on the Test Data"""

# Accuracy for the prediction on the training data
test_data_prediction=model.predict(X_test)

print(test_data_prediction)

#R squared error
score_21 = metrics.r2_score(Y_test,test_data_prediction)

#Mean absolute error
score_22=metrics.mean_absolute_error(Y_test,test_data_prediction)

print("R_squared_error :",score_21)
print("Mean_absolute_error :",score_22)

